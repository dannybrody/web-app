Description: >
  This template deploys the Jenkins service connected to an EFS volume for persistence

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Type: String
    Default: t2.large

  ClusterSize:
    Type: Number
    Default: 1

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerNames:
    Description: The Application Load Balancer listener to register with
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id

  JenkinsSecurityGroup: 
    Description: The Security group to register with Jenkins
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
    Description: SSH Keyname for Jenkins Machine
    Type: String

  S3Bucket:
    Description: S3 bucket name
    Type: String

  S3Prefix:
    Description: S3 prefix for code deploy
    Type: String

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-cd0f5cb6
    us-east-2:
      AMI: ami-10547475
    us-west-1:
      AMI: ami-09d2fb69
    us-west-2:
      AMI: ami-6e1a0117
    eu-west-1:
      AMI: ami-785db401
    eu-west-2:
      AMI: ami-996372fd
    eu-central-1:
      AMI: ami-1e339e71
    ap-northeast-1:
      AMI: ami-ea4eae8c
    ap-southeast-1:
      AMI: ami-6f198a0c
    ap-southeast-2:
      AMI: ami-e2021d81
    ca-central-1:
      AMI: ami-b3d965d7

Resources:

  JenkinsCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: !Sub ${EnvironmentName}-Jenkins-CodeDeploy-Policy
          PolicyDocument: 
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "s3:*" ],
                  "Resource": [
                    {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"}, "/*"]]}, 
                    {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"}]]}
                  ]
                }, 
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetBucketLocation", "s3:ListAllMyBuckets"],
                  "Resource": "*"
                }
              ]
            }
      RoleName: !Sub ${EnvironmentName}-Jenkins-CodeDeploy-Role

  STSAssumeRoleJenkinsCodeDeployRole:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Action" : [ "sts:AssumeRole" ],
            "Resource" : [{
              "Fn::GetAtt" : [ "JenkinsCodeDeployRole", "Arn" ]
            }]
          }]
        }
      PolicyName: !Sub ${EnvironmentName}-Jenkins-CodeDeploy-AssumeRole
      Roles:
        - !Ref JenkinsRole

  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess'
      AssumeRolePolicyDocument: |
        {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ]},
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        }
      Policies: 
          - PolicyName: !Sub ${EnvironmentName}-Jenkins-Policy
            PolicyDocument: 
              {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeTags",
                    "s3:PutObject",
                    "codedeploy:ListApplications"
                  ],
                  "Resource": "*"
                }, 
                {
                  "Effect": "Allow",
                  "Action": [ "s3:*" ],
                  "Resource": [
                    {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"}, "/*"]]}, 
                    {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "S3Bucket"}]]}
                  ]
                }, 
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetBucketLocation", "s3:ListAllMyBuckets"],
                  "Resource": "*"
                }]
              }
      RoleName: !Sub ${EnvironmentName}-Jenkins-Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsRole

  JenkinsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins
      PerformanceMode: generalPurpose
      Encrypted: Yes
      KmsKeyId: !GetAtt 
        - EFSkey
        - Arn

  EFSkey:
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: '*'

  MountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Select [ 0, !Ref Subnets ]
      SecurityGroups:
        - !Ref JenkinsSecurityGroup

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Select [ 1, !Ref Subnets ]
      SecurityGroups:
        - !Ref JenkinsSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - LaunchConfiguration
    Properties:
      LoadBalancerNames : 
       - !Ref LoadBalancerNames
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins
          PropagateAtLaunch: true
        - Key: Efs
          Value: !Ref JenkinsEFS
          PropagateAtLaunch: true
        - Key: S3Location
          Value: !Join [ '/', [ !Ref S3Bucket, !Ref S3Prefix, '' ]]
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: 
      - JenkinsEFS
      - MountTarget1
      - MountTarget0
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref JenkinsSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          ## Raise file descriptor limits
          echo '* hard nofile 500000' | tee -a /etc/security/limits.conf
          echo '* soft nofile 500000' | tee -a /etc/security/limits.conf
          ulimit -n 500000
          wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
          echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list
          apt-get update -y
          apt-get install -y python-setuptools nfs-common python-pip awscli
          
          #####   INSTALL GOLANG  #####
          curl -qO https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
          tar -xvf go1.8.linux-amd64.tar.gz
          sudo mv go /usr/local
          sudo mv /usr/local/go/bin/* /usr/local/bin/
          rm go1.8.linux-amd64.tar.gz

          #####   MOUNT EFS VOLUME FOR JEKNINS #####
          mkdir /var/lib/jenkins
          INSTANCE_ID="`wget -qO- http://instance-data/latest/meta-data/instance-id`"
          REGION="`wget -qO- http://instance-data/latest/meta-data/placement/availability-zone | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
          TAG_NAME="Efs"
          EFS_ID="`aws --region $REGION ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=$TAG_NAME" --output=text | cut -f5`"
          if [ -z "$EFS_ID" ]; then
            sleep 60
            EFS_ID="`aws --region $REGION ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=$TAG_NAME" --output=text | cut -f5`"
          fi
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_ID.efs.$REGION.amazonaws.com:/ /var/lib/jenkins

          #####   INSTALL JENKINS   #####
          apt-get install jenkins -y
          JENKINS_PW="/var/lib/jenkins/secrets/initialAdminPassword"
          if [ -f "$JENKINS_PW" ]; then
            S3_LOCATION="`aws --region $REGION ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=S3Location" --output=text | cut -f5`"
            aws s3 cp $JENKINS_PW s3://$S3_LOCATION
          fi

          #####   SIGNAL COMPLETE   #####
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup

Outputs:
  AutoScalingGroup:
    Description: A reference to the AutoScalingGroup
    Value: !Ref AutoScalingGroup

  JenkinsCodeDeployRole:
    Description: ARN of the JenkinsCodeDeploy Role
    Value: !GetAtt
      - JenkinsCodeDeployRole 
      - Arn
