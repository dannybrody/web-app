Description: >
  This template deploys the Jenkins service connected to an EFS volume for persistence

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Type: String
    Default: t2.large

  ClusterSize:
    Type: Number
    Default: 1

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerNames:
    Description: The Application Load Balancer listener to register with
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id

  JenkinsSecurityGroup: 
    Description: The Security group to register with Jenkins
    Type: AWS::EC2::SecurityGroup::Id

  KeyName:
    Description: SSH Keyname for Jenkins Machine
    Type: String

Mappings:
  AWSRegionToAMI:
    # us-east-1:
    #   AMI: ami-6df8fe7a
    # us-east-2:
    #   AMI: ami-c6b5efa3
    # us-west-1:
    #   AMI: ami-1eda8d7e
    # us-west-2:
    #   AMI: ami-a2ca61c2
    # eu-west-1:
    #   AMI: ami-ba346ec9
    # eu-west-2:
    #   AMI: ami-42c5cf26
    # eu-central-1:
    #   AMI: ami-e012d48f
    # ap-northeast-1:
    #   AMI: ami-08f7956f
    # ap-southeast-1:
    #   AMI: ami-f4832f97
    ap-southeast-2:
      AMI: ami-e2021d81
    # ca-central-1:
    #   AMI: ami-be45f7da

Resources:

  JenkinsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ec2.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies: 
          - PolicyName: !Sub ${EnvironmentName}-Jenkins-Policy
            PolicyDocument: 
              {
                  "Version": "2012-10-17",
                  "Statement": [{
                          "Effect": "Allow",
                          "Action": [
                              "ec2:DescribeTags"
                          ],
                          "Resource": "*"
                  }]
              }
      RoleName: !Sub ${EnvironmentName}-Jenkins-Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref JenkinsRole

  JenkinsEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins
      PerformanceMode: generalPurpose
      Encrypted: Yes
      KmsKeyId: !GetAtt 
        - EFSkey
        - Arn

  EFSkey:
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: '*'

  MountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Select [ 0, !Ref Subnets ]
      SecurityGroups:
        - 
          !Ref JenkinsSecurityGroup

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JenkinsEFS
      SubnetId: !Select [ 1, !Ref Subnets ]
      SecurityGroups:
        - 
          !Ref JenkinsSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames : 
       - !Ref LoadBalancerNames
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins
          PropagateAtLaunch: true
        - Key: Efs
          Value: !Ref JenkinsEFS
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref JenkinsSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          ## Raise file descriptor limits
          echo '* hard nofile 500000' | tee -a /etc/security/limits.conf
          echo '* soft nofile 500000' | tee -a /etc/security/limits.conf
          ulimit -n 500000
          wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
          echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list
          apt-get update -y
          apt-get install -y python-setuptools nfs-common python-pip awscli
          mkdir /var/lib/jenkins
          #####   MOUNT EFS VOLUME FOR JEKNINS #####
          INSTANCE_ID="`wget -qO- http://instance-data/latest/meta-data/instance-id`"
          REGION="`wget -qO- http://instance-data/latest/meta-data/placement/availability-zone | sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:'`"
          TAG_NAME="Efs"
          EFS_ID="`aws --region $REGION ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=$TAG_NAME" --output=text | cut -f5`"
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_ID.efs.$REGION.amazonaws.com:/ /var/lib/jenkins

          apt-get install jenkins -y
          
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup




# Outputs:
#   KeyId:
#     Value: !GetAtt 
#       - key
#       - Arn

# https://serverfault.com/questions/774510/jenkins-2-x-disable-initial-admin-setup
# https://groups.google.com/forum/#!msg/jenkinsci-users/Pb4QZVc2-f0/JKUtQ_Y1NgAJ
# Found a solution for this issue.  In previous releases, I had set this flag via JENKINS_JAVA_OPTIONS in /etc/default/jenkins.  If I move that same flag from JENKINS_JAVA_OPTIONS to JAVA_ARGS in /etc/default/jenkins, it works as expected.

### INSTALL GO
# curl -qO https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
# tar -xvf go1.8.linux-amd64.tar.gz
# sudo mv go /usr/local
# rm go1.8.linux-amd64.tar.gz
# cat ~/.profile
# echo 'export PATH=$PATH:/usr/local/go/bin' | tee -a ~/.profile
# source ~/.profile
