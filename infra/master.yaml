Description: >

    This template deploys a VPC, with a pair of public and private subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the private subnets.
Parameters:

    DomainName:
        Description: Fully qualified domain name (FQDN) of the site that you want to secure with the ACM certificate
        Type: String

    KeyName:
        Description: KeyName you would like for ssh access
        Type: String

    Certificate:
        Description: SSL certificate ARN
        Type: String

    S3Bucket:
        Description: S3 bucket name
        Type: String

    S3Prefix:
        Description: S3 prefix for code deploy
        Type: String

    DBUser:
        Description: Db user name
        Type: String

    DBPW:
        Description: Db password
        Type: String



Resources:

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/vpc.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                DomainName: !Ref DomainName

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/security-groups.yaml
            Parameters: 
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    JenkinsELB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.JenkinsELBSG
                Certificate: !Ref Certificate
                DomainName: !Ref DomainName
                SubDomainName: jenkins
                InstancePort: 8080
                HealthPath: login

    JenkinsCI:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/jenkins.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                VPC: !GetAtt VPC.Outputs.VPC
                LoadBalancerNames: !GetAtt JenkinsELB.Outputs.LoadBalancer
                JenkinsSecurityGroup: !GetAtt SecurityGroups.Outputs.JenkinsSecurityGroup
                KeyName: !Ref KeyName
                S3Bucket: !Ref S3Bucket
                S3Prefix: !Ref S3Prefix

    WebAppELB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.AppELBSG
                Certificate: !Ref Certificate
                DomainName: !Ref DomainName
                SubDomainName: app
                InstancePort: 8080
                HealthPath: swagger/

    App:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/app.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                VPC: !GetAtt VPC.Outputs.VPC
                LoadBalancerNames: !GetAtt WebAppELB.Outputs.LoadBalancer
                SecurityGroup: !GetAtt SecurityGroups.Outputs.AppSecurityGroup
                KeyName: !Ref KeyName
                S3Bucket: !Ref S3Bucket
                S3Prefix: !Ref S3Prefix

    Redis:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/redis.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                CacheNodeType: cache.m4.large
                SecurityGroup: !GetAtt SecurityGroups.Outputs.RedisSecurityGroup
                Nodes: 1
                DomainName: !Join [ ".", [ "vpc" , !Ref DomainName ] ]

    Database:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/interview-web-app/resources/database.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                # subtest: subnet-4f9c8e15,subnet-6c14af08
                SecurityGroup: !GetAtt SecurityGroups.Outputs.DBSecurityGroup
                DomainName: !Join [ ".", [ "vpc" , !Ref DomainName ] ]
                DBUser: !Ref DBUser
                DBPW: !Ref DBPW
