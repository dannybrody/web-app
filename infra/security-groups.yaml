Description: >
    This template contains the security groups required by our entire stack.
    We create them in a seperate nested template, so they can be referenced
    by all of the other nested templates.

Parameters:
    
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    
    VPC:
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the security groups should be deployed to

Resources:

  JenkinsELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VPC
      GroupDescription: !Sub ${EnvironmentName}-Jenkins ELB Access
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins-ELB

  JenkinsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Jenkins
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref JenkinsELBSG
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
      # - CidrIp: 0.0.0.0/0
      #   IpProtocol: tcp
      #   FromPort: '22'
      #   ToPort: '22'
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Jenkins

  EFSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 2049
      GroupId: !Sub ${JenkinsSecurityGroup}
      IpProtocol: tcp
      SourceSecurityGroupId: !Sub ${JenkinsSecurityGroup}
      ToPort: 2049

  AppELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VPC
      GroupDescription: !Sub ${EnvironmentName} ELB Access
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-ELB

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: App
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppELBSG
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}

  RedisSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub ${EnvironmentName} Redis Access
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-Redis

  DBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub ${EnvironmentName} DB Access
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref AppSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName}-DB

Outputs:

    JenkinsELBSG:
      Description: A reference to the security group for Jenkins load balancer
      Value: !Ref JenkinsELBSG

    JenkinsSecurityGroup:
      Description: A reference to the security group for jenkins
      Value: !Ref JenkinsSecurityGroup

    AppELBSG:
      Description: A reference to the security group for App load balancer
      Value: !Ref AppELBSG

    AppSecurityGroup:
      Description: A reference to the security group for App
      Value: !Ref AppSecurityGroup

    RedisSecurityGroup:
      Description: A reference to the security group for Redis
      Value: !Ref RedisSecurityGroup

    DBSecurityGroup:
      Description: A reference to the security group for Redis
      Value: !Ref DBSecurityGroup